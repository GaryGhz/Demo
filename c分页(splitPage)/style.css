/* :root 这个 CSS 伪类匹配文档树的根元素。
    对于 HTML 来说，:root 表示 <html> 元素，
    除了优先级更高之外，与 html 选择器相同。 */

/* 全局变量 */

:root {
    --container-bg-color: #333;
    --left-bg-color: rgba(223, 39, 39, 0.7);
    --right-bg-color: rgba(43, 43, 43, 0.8);
    --left-button-hover-color: rgba(161, 11, 11, 0.3);
    --right-button-hover-color: rgba(92, 92, 92, 0.3);
    --hover-width: 75%;
    --other-width: 25%;
    --speed: 1000ms;
}

* {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}

html, body {
    width: 100%;
    height: 100%;
}

.container {
    position: relative;
    width: 100%;
    height: 100%;
    background-color: var(--container-bg-color);
}

.split {
    position: absolute;
    width: 50%;
    height: 100%;
    overflow: hidden;
}

.split.left {
    left: 0;
    background: url("./img/designer.jpg") center center no-repeat;
    background-size: cover;
}

.split.right {
    right: 0;
    background: url("./img/programing.png") center center no-repeat;
    background-size: cover;
}

/* 添加一层蒙版 */

.split.left::before, .split.right::before {
    position: absolute;
    content: "";
    width: 100%;
    height: 100%;
}

.split.left::before {
    background-color: var(--left-bg-color);
}

.split.right::before {
    background-color: var(--right-bg-color);
}

h1 {
    font-size: 4rem;
    color: #fff;
    position: absolute;
    left: 50%;
    /* translateX, translateY 如果值是百分数, 那么这个百分数的参照物是它自身
    所以可以使用这两个配合 left 和 top 来水平和垂直居中 */
    transform: translateX(-50%);
    white-space: nowrap;
    top: 20%;
}

.button {
    display: inline-block;
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    top: 40%;
    width: 15rem;
    height: 2.5rem;
    line-height: 2.2rem;
    /* padding-top: 0.4rem; */
    text-align: center;
    color: #fff;
    border: #fff solid 0.2rem;
    font-size: 1rem;
    font-weight: bold;
    text-decoration: none;
    text-transform: uppercase;
}

.split.left .button:hover {
    background-color: var(--left-button-hover-color);
    border-color: var(--left-button-hover-color)
}

.split.right .button:hover {
    background-color: var(--right-button-hover-color);
    border-color: var(--right-button-hover-color)
}

/* 添加过渡动画 */

.split.left, .split.right, .split.left::before, .split.right::before {
    transition: var(--speed) all ease-out;
}

/* hover-left && hover-right */

.hover-left .left {
    width: var(--hover-width);
}

.hover-left .right {
    width: var(--other-width);
}

.hover-left .right::before {
    z-index: 2;
}

.hover-right .left {
    width: var(--other-width);
}

.hover-right .right {
    width: var(--hover-width);
}

.hover-right .left::before {
    z-index: 2;
}

/* 响应式 */

@media(max-width:1100px) {
    h1 {
        font-size: 2rem;
    }
    .button {
        width: 12rem;
    }
}